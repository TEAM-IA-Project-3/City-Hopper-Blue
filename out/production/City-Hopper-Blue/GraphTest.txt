// --== CS400 File Header Information ==--
// Name: Jijie Zhang
// Email: jzhang998@wisc.edu
// Team: IA
// TA: Sid
// Lecturer: Gary
// Notes to Grader: None
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;

import java.util.LinkedList;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * Tests the implementation of CS400Graph for the individual component of
 * Project Three: the implementation of Dijsktra's Shortest Path algorithm.
 */
public class GraphTest {

  private CS400Graph<String> graph;

  /**
   * Instantiate graph from last week's shortest path activity.
   */
  @BeforeEach
  public void createGraph() {
    graph = new CS400Graph<>();
    // insert vertices A-E
    graph.insertVertex("A");
    graph.insertVertex("B");
    graph.insertVertex("C");
    graph.insertVertex("D");
    graph.insertVertex("E");
    // insert edges from Week 09. Dijkstra's Activity
    graph.insertEdge("A","B",2);
    graph.insertEdge("A","D",4);
    graph.insertEdge("A","E",1);
    graph.insertEdge("B","C",5);
    graph.insertEdge("C","A",3);
    graph.insertEdge("D","B",3);
    graph.insertEdge("D","C",7);
    graph.insertEdge("D","E",1);
    graph.insertEdge("E","C",8);
  }

  /**
   * Checks the distance/total weight cost from the vertex labelled C to E
   * (should be 4), and from the vertex labelled A to C (should be 7).
   */
  @Test
  public void providedTestToCheckPathCosts() {
    assertTrue(graph.getPathCost("C", "E") == 4);
    assertTrue(graph.getPathCost("A", "C") == 7);
  }

  /**
   * Checks the ordered sequence of data within vertices from the vertex
   * labelled C to E, and from the vertex labelled A to C.
   */
  @Test
  public void providedTestToCheckPathContents() {
    assertTrue(graph.shortestPath("C", "E").toString().equals(
        "[C, A, E]"
    ));
    assertTrue(graph.shortestPath("A", "C").toString().equals(
        "[A, B, C]"
    ));
  }

  /**
   * Test the shortest path distance from vertex D to A should be 10.
   */
  @Test
  public void testToCheckPathDistance() {
    assertTrue(graph.getPathCost("D","A") == 10);
  }

  /**
   * Test the ordered sequence of data within vertices for shortest path from vertex D to A
   * which should be [D,C,A].
   */
  @Test
  public void testToCheckSequence() {
    assertTrue(graph.shortestPath("D","A").toString().equals("[D, C, A]"));
  }

  /**
   * Test the ordered sequence of data within vertices for shortest path from vertex D to C
   * which should be [D,C]. From D to E should be [D,E] and from E to A should be [E,C,A].
   */
  @Test
  public void testSequence() {
    assertTrue(graph.shortestPath("D","C").toString().equals("[D, C]"));
    assertTrue(graph.shortestPath("D","E").toString().equals("[D, E]"));
    assertTrue(graph.shortestPath("E","A").toString().equals("[E, C, A]"));
  }

  /**
   * Test the shortest path distance from vertex D to C which should be 7.
   * From D to E should be 1 and from E to A should be 11.
   */
  @Test
  public void testDistance() {
    assertTrue(graph.getPathCost("D","C") == 7);
    assertTrue(graph.getPathCost("D","E") == 1);
    assertTrue(graph.getPathCost("E","A") == 11);
  }
}
